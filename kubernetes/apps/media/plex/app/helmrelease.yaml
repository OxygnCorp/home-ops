---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: plex
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      plex:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/plex
              tag: 1.41.8.9834@sha256:40e620ffcdc65331a0c2a7ed9a95700da7d527244f33c21bd35fc30aa25f19ea
            env:
              TZ: "Europe/Paris"
              # ALLOWED_NETWORKS: "10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,127.0.0.0/8"
              # SECURE_CONNECTIONS: "1" #1: Preferred, 0: Required
              PLEX_ADVERTISE_URL: "http://10.10.98.170:32400,https://plex.oxygn.dev:443"
              PLEX_NO_AUTH_NETWORKS: "10.10.20.0/24"
              # required for HW acceleration
              NVIDIA_VISIBLE_DEVICES: "all"
              NVIDIA_DRIVER_CAPABILITIES: "all"
              # HARDWARE_DEVICE_PATH: "/dev/nvidia0"
              # TRANSCODER_TEMP_DIRECTORY: "/transcode"
            envFrom:
              - secretRef:
                  name: plex-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /identity
                    port: 32400
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 10
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                # gpu.intel.com/i915: 1
                nvidia.com/gpu: 1
                memory: 4Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44]
      # nodeSelector:
      #   intel.feature.node.kubernetes.io/gpu: "true"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: nvidia.com/gpu.present
                    operator: In
                    values:
                      - "true"
      nodeSelector:
        nvidia.com/gpu.present: "true"
      runtimeClassName: nvidia

        # pod:
        #   affinity:
        #     nodeAffinity:
        #       requiredDuringSchedulingIgnoredDuringExecution:
        #         nodeSelectorTerms:
        #           - matchExpressions:
        #               - key: nvidia.com/gpu.present
        #                 operator: In
        #                 values:
        #                   - "true"
        #   nodeSelector:
        #     nvidia.com/gpu.present: "true"
        #   runtimeClassName: nvidia
        #   securityContext:
        #     runAsUser: 1000
        #     runAsGroup: 1000
        #     fsGroup: 1000
        #     fsGroupChangePolicy: OnRootMismatch
        #     supplementalGroups: [44, 105]
    service:
      app:
        controller: plex
        type: LoadBalancer
        annotations:
          io.cilium/lb-ipam-ips: 10.10.98.170
        ports:
          http:
            port: &port 32400
    route:
      app:
        hostnames:
          - "{{ .Release.Name }}.oxygn.dev"
        parentRefs:
          - name: external
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *port
            filters:
              - type: RequestHeaderModifier
                requestHeaderModifier:
                  remove: ["Range"]
            matches:
              - path:
                  type: PathPrefix
                  value: /library/streams
          - backendRefs:
              - identifier: app
                port: *port
    persistence:
      config:
        existingClaim: plex
        # TODO: If setting up Plex for the first time, you'll want to add the globalMounts section
        # globalMounts:
        #   - path: /config/Library/Application Support/Plex Media Server
      # Separate PVC for cache to avoid backing up cache files
      cache:
        existingClaim: plex-cache
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Cache
      config-logs:
        type: emptyDir
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Logs
      tmp:
        type: emptyDir
      transcode:
        type: emptyDir
      media:
        type: nfs
        server: funkstation.internal
        path: /volume2/Media
        globalMounts:
          - path: /media
            readOnly: true
      pictures:
        type: nfs
        server: funkstation.internal
        path: /volume2/Pictures
        globalMounts:
          - path: /pictures
            readOnly: true
      videos:
        type: nfs
        server: funkstation.internal
        path: /volume2/Videos
        globalMounts:
          - path: /videos
            readOnly: true
